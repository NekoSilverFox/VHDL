HIF003
--
-- Copyright (C) 1988-1998 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	f8count.gdf
	{
		f8count [] []
		{
			11 [] [];
		}
	}
	lpm_counter.tdf
	{
		lpm_counter [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_DIRECTION=DEFAULT,LPM_MODULUS=0,LPM_AVALUE=0,LPM_SVALUE=0,DEVICE_FAMILY,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,NOT_GATE_PUSH_BACK=OFF,CARRY_CNT_EN=SMART,LABWIDE_SCLR=ON] [aglobal.inc,dffeea.inc,lpm_counter.inc,lpm_compare.inc,cmpconst.inc,lpm_add_sub.inc,lpm_decode.inc,lpm_constant.inc]
		{
			10 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=3,LPM_DIRECTION=DEFAULT,LPM_MODULUS=0,LPM_AVALUE=0,LPM_SVALUE=0,DEVICE_FAMILY=FLEX10K,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,NOT_GATE_PUSH_BACK=ON,CARRY_CNT_EN=SMART,LABWIDE_SCLR=ON] [sload,clock,aclr,q2,q1,q0];
		}
	}
	declut.tdf
	{
		declut [USE_LPM_FOR_AHDL_OPERATORS,width,STAGE,TOT_LEVELS,LATENCY] [bypassff.inc,declut.inc]
		{
			9 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=3,STAGE=0,TOT_LEVELS=1,LATENCY=0] [eq7,eq6,eq5,eq4,eq3,eq2,eq1,eq0,data2,data1,data0,enable];
		}
	}
	lpm_decode.tdf
	{
		lpm_decode [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_DECODES,LPM_PIPELINE=0,CASCADE_CHAIN,DEVICE_FAMILY] [aglobal.inc,lpm_constant.inc,lpm_compare.inc,altshift.inc,declut.inc]
		{
			8 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=3,LPM_DECODES=8,LPM_PIPELINE=0,CASCADE_CHAIN=IGNORE,DEVICE_FAMILY=FLEX10K] [eq7,eq6,eq5,eq4,eq3,eq2,eq1,eq0,data2,data1,data0,enable];
		}
	}
	muxlut.tdf
	{
		muxlut [USE_LPM_FOR_AHDL_OPERATORS,SIZE,LEVEL,TOT_LEVELS,LATENCY,REM_LATENCY,LOCAL=0,CASCADE_CHAIN] [altshift.inc,muxlut.inc]
		{
			7 [USE_LPM_FOR_AHDL_OPERATORS=OFF,SIZE=2,LEVEL=1,TOT_LEVELS=2,LATENCY=0,LOCAL=1,CASCADE_CHAIN=IGNORE] [result,data1,data0,select0];
			6 [USE_LPM_FOR_AHDL_OPERATORS=OFF,SIZE=4,LEVEL=0,TOT_LEVELS=2,LATENCY=0,LOCAL=0,CASCADE_CHAIN=IGNORE] [result,data3,data2,data1,data0,select1,select0];
			5 [USE_LPM_FOR_AHDL_OPERATORS=OFF,SIZE=8,LEVEL=1,TOT_LEVELS=2,LATENCY=0,LOCAL=0,CASCADE_CHAIN=IGNORE] [result,data7,data6,data5,data4,data3,data2,data1,data0,select2,select1,select0];
		}
	}
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			4 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=8,DEPTH=0] [result7,result6,result5,result4,result3,result2,result1,result0,data7,data6,data5,data4,data3,data2,data1,data0];
		}
	}
	bypassff.tdf
	{
		bypassff [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=8] []
		{
			3 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=3] [q2,d2,d1,d0];
		}
	}
	lpm_mux.tdf
	{
		lpm_mux [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_SIZE,LPM_WIDTHS,LPM_PIPELINE=0] [altshift.inc,bypassff.inc,muxlut.inc]
		{
			2 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=8,LPM_SIZE=8,LPM_WIDTHS=3,LPM_PIPELINE=0] [result7,result6,result5,result4,result3,result2,result1,result0,data7_7,data7_6,data7_5,data7_4,data7_3,data7_2,data7_1,data7_0,data6_7,data6_6,data6_5,data6_4,data6_3,data6_2,data6_1,data6_0,data5_7,data5_6,data5_5,data5_4,data5_3,data5_2,data5_1,data5_0,data4_7,data4_6,data4_5,data4_4,data4_3,data4_2,data4_1,data4_0,data3_7,data3_6,data3_5,data3_4,data3_3,data3_2,data3_1,data3_0,data2_7,data2_6,data2_5,data2_4,data2_3,data2_2,data2_1,data2_0,data1_7,data1_6,data1_5,data1_4,data1_3,data1_2,data1_1,data1_0,data0_7,data0_6,data0_5,data0_4,data0_3,data0_2,data0_1,data0_0,sel2,sel1,sel0];
		}
	}
	altdpram.tdf
	{
		altdpram [USE_LPM_FOR_AHDL_OPERATORS,WIDTH,WIDTHAD,NUMWORDS,FILE=NO_FILE,INDATA_REG=INCLOCK,INDATA_ACLR=ON,WRADDRESS_REG=INCLOCK,WRADDRESS_ACLR=ON,WRCONTROL_REG=INCLOCK,WRCONTROL_ACLR=ON,RDADDRESS_REG=OUTCLOCK,RDADDRESS_ACLR=ON,RDCONTROL_REG=OUTCLOCK,RDCONTROL_ACLR=ON,OUTDATA_REG=UNREGISTERED,OUTDATA_ACLR=ON,USE_EAB=ON,DEVICE_FAMILY] [aglobal.inc,lpm_mux.inc,lpm_decode.inc,memmodes.inc]
		{
			1 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=8,WIDTHAD=3,NUMWORDS=8,FILE=NO_FILE,INDATA_REG=UNREGISTERED,INDATA_ACLR=ON,WRADDRESS_REG=UNREGISTERED,WRADDRESS_ACLR=ON,WRCONTROL_REG=UNREGISTERED,WRCONTROL_ACLR=ON,RDADDRESS_REG=UNREGISTERED,RDADDRESS_ACLR=ON,RDCONTROL_REG=UNREGISTERED,RDCONTROL_ACLR=ON,OUTDATA_REG=UNREGISTERED,OUTDATA_ACLR=ON,USE_EAB=ON,DEVICE_FAMILY=FLEX10K] [q0,q1,q2,q3,q4,q5,q6,q7,wren,data0,data1,data2,data3,data4,data5,data6,data7,wraddress0,wraddress1,wraddress2,rden,rdaddress0,rdaddress1,rdaddress2];
		}
	}
	regfile.gdf
	{
		regfile [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	regfile::(0,0):(0): regfile.gdf
	{
		lpm_counter::(0,0):(8): lpm_counter.tdf
		{
			f8count:11:(227,9):(61,p8c0): f8count.gdf;
		}
		altdpram::(0,0):(7): altdpram.tdf
		{
			lpm_decode:8:(208,4):(137,wdecoder): lpm_decode.tdf
			{
				declut:9:(94,5):(62,decoder): declut.tdf;
				altshift:4:(75,2):(41,external_latency_ffs): altshift.tdf;
			}
			lpm_mux:2:(205,4):(56,mux): lpm_mux.tdf
			{
				muxlut:5:(167,21):(282): muxlut.tdf
				{
					muxlut:7:(230,21):(77): muxlut.tdf;
					muxlut:6:(207,27):(60): muxlut.tdf;
					muxlut:6:(207,27):(43): muxlut.tdf;
				}
				muxlut:5:(167,21):(261): muxlut.tdf
				{
					muxlut:7:(230,21):(77): muxlut.tdf;
					muxlut:6:(207,27):(60): muxlut.tdf;
					muxlut:6:(207,27):(43): muxlut.tdf;
				}
				muxlut:5:(167,21):(240): muxlut.tdf
				{
					muxlut:7:(230,21):(77): muxlut.tdf;
					muxlut:6:(207,27):(60): muxlut.tdf;
					muxlut:6:(207,27):(43): muxlut.tdf;
				}
				muxlut:5:(167,21):(219): muxlut.tdf
				{
					muxlut:7:(230,21):(77): muxlut.tdf;
					muxlut:6:(207,27):(60): muxlut.tdf;
					muxlut:6:(207,27):(43): muxlut.tdf;
				}
				muxlut:5:(167,21):(198): muxlut.tdf
				{
					muxlut:7:(230,21):(77): muxlut.tdf;
					muxlut:6:(207,27):(60): muxlut.tdf;
					muxlut:6:(207,27):(43): muxlut.tdf;
				}
				muxlut:5:(167,21):(177): muxlut.tdf
				{
					muxlut:7:(230,21):(77): muxlut.tdf;
					muxlut:6:(207,27):(60): muxlut.tdf;
					muxlut:6:(207,27):(43): muxlut.tdf;
				}
				muxlut:5:(167,21):(156): muxlut.tdf
				{
					muxlut:7:(230,21):(77): muxlut.tdf;
					muxlut:6:(207,27):(60): muxlut.tdf;
					muxlut:6:(207,27):(43): muxlut.tdf;
				}
				muxlut:5:(167,21):(135): muxlut.tdf
				{
					muxlut:7:(230,21):(77): muxlut.tdf;
					muxlut:6:(207,27):(60): muxlut.tdf;
					muxlut:6:(207,27):(43): muxlut.tdf;
				}
				altshift:4:(88,2):(114,external_latency_ffs): altshift.tdf;
				bypassff:3:(82,17):(104,sel_latency_ff0): bypassff.tdf;
			}
		}
	}
}
