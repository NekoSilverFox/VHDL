HIF003
--
-- Copyright (C) 1988-1998 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	lpm_mux.tdf
	{
		lpm_mux [LPM_PIPELINE=0,LPM_WIDTHS,LPM_SIZE,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [muxlut.inc,bypassff.inc,altshift.inc]
		{
			5 [LPM_PIPELINE=0,LPM_WIDTHS=3,LPM_SIZE=8,LPM_WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result7,result6,result5,result4,result3,result2,result1,result0,sel2,sel1,sel0,data7_7,data7_6,data7_5,data7_4,data7_3,data7_2,data7_1,data7_0,data6_7,data6_6,data6_5,data6_4,data6_3,data6_2,data6_1,data6_0,data5_7,data5_6,data5_5,data5_4,data5_3,data5_2,data5_1,data5_0,data4_7,data4_6,data4_5,data4_4,data4_3,data4_2,data4_1,data4_0,data3_7,data3_6,data3_5,data3_4,data3_3,data3_2,data3_1,data3_0,data2_7,data2_6,data2_5,data2_4,data2_3,data2_2,data2_1,data2_0,data1_7,data1_6,data1_5,data1_4,data1_3,data1_2,data1_1,data1_0,data0_7,data0_6,data0_5,data0_4,data0_3,data0_2,data0_1,data0_0];
		}
	}
	dtrigger8x.gdf
	{
		dtrigger8x [] []
		{
			4 [] [];
		}
	}
	lpm_decode.tdf
	{
		lpm_decode [DEVICE_FAMILY,CASCADE_CHAIN,LPM_PIPELINE=0,LPM_DECODES,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [declut.inc,altshift.inc,lpm_compare.inc,lpm_constant.inc,aglobal.inc]
		{
			1 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN=IGNORE,LPM_PIPELINE=0,LPM_DECODES=8,LPM_WIDTH=3,USE_LPM_FOR_AHDL_OPERATORS=OFF] [enable,data2,data1,data0,eq7,eq6,eq5,eq4,eq3,eq2,eq1,eq0];
		}
	}
	altshift.tdf
	{
		altshift [DEPTH=0,WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS] []
		{
			2 [DEPTH=0,WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [data0,data1,data2,data3,data4,data5,data6,data7,result0,result1,result2,result3,result4,result5,result6,result7];
		}
	}
	declut.tdf
	{
		declut [LATENCY,TOT_LEVELS,STAGE,width,USE_LPM_FOR_AHDL_OPERATORS] [declut.inc,bypassff.inc]
		{
			3 [LATENCY=0,TOT_LEVELS=1,STAGE=0,width=3,USE_LPM_FOR_AHDL_OPERATORS=OFF] [enable,data0,data1,data2,eq0,eq1,eq2,eq3,eq4,eq5,eq6,eq7];
		}
	}
	bypassff.tdf
	{
		bypassff [WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS] []
		{
			6 [WIDTH=3,USE_LPM_FOR_AHDL_OPERATORS=OFF] [d0,d1,d2,q2];
		}
	}
	muxlut.tdf
	{
		muxlut [CASCADE_CHAIN,LOCAL=0,REM_LATENCY,LATENCY,TOT_LEVELS,LEVEL,SIZE,USE_LPM_FOR_AHDL_OPERATORS] [muxlut.inc,altshift.inc]
		{
			7 [CASCADE_CHAIN=IGNORE,LOCAL=0,LATENCY=0,TOT_LEVELS=2,LEVEL=1,SIZE=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [select0,select1,select2,data0,data1,data2,data3,data4,data5,data6,data7,result];
			8 [CASCADE_CHAIN=IGNORE,LOCAL=0,LATENCY=0,TOT_LEVELS=2,LEVEL=0,SIZE=4,USE_LPM_FOR_AHDL_OPERATORS=OFF] [select0,select1,data0,data1,data2,data3,result];
			9 [CASCADE_CHAIN=IGNORE,LOCAL=1,LATENCY=0,TOT_LEVELS=2,LEVEL=1,SIZE=2,USE_LPM_FOR_AHDL_OPERATORS=OFF] [select0,data0,data1,result];
		}
	}
	registerfile.gdf
	{
		registerfile [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	registerfile::(0,0):(0): registerfile.gdf
	{
		lpm_mux::(0,0):(19): lpm_mux.tdf
		{
			bypassff:6:(82,17):(104,sel_latency_ff0): bypassff.tdf;
			altshift:2:(88,2):(114,external_latency_ffs): altshift.tdf;
			muxlut:7:(167,21):(135): muxlut.tdf
			{
				muxlut:8:(207,27):(43): muxlut.tdf;
				muxlut:8:(207,27):(60): muxlut.tdf;
				muxlut:9:(230,21):(77): muxlut.tdf;
			}
			muxlut:7:(167,21):(156): muxlut.tdf
			{
				muxlut:8:(207,27):(43): muxlut.tdf;
				muxlut:8:(207,27):(60): muxlut.tdf;
				muxlut:9:(230,21):(77): muxlut.tdf;
			}
			muxlut:7:(167,21):(177): muxlut.tdf
			{
				muxlut:8:(207,27):(43): muxlut.tdf;
				muxlut:8:(207,27):(60): muxlut.tdf;
				muxlut:9:(230,21):(77): muxlut.tdf;
			}
			muxlut:7:(167,21):(198): muxlut.tdf
			{
				muxlut:8:(207,27):(43): muxlut.tdf;
				muxlut:8:(207,27):(60): muxlut.tdf;
				muxlut:9:(230,21):(77): muxlut.tdf;
			}
			muxlut:7:(167,21):(219): muxlut.tdf
			{
				muxlut:8:(207,27):(43): muxlut.tdf;
				muxlut:8:(207,27):(60): muxlut.tdf;
				muxlut:9:(230,21):(77): muxlut.tdf;
			}
			muxlut:7:(167,21):(240): muxlut.tdf
			{
				muxlut:8:(207,27):(43): muxlut.tdf;
				muxlut:8:(207,27):(60): muxlut.tdf;
				muxlut:9:(230,21):(77): muxlut.tdf;
			}
			muxlut:7:(167,21):(261): muxlut.tdf
			{
				muxlut:8:(207,27):(43): muxlut.tdf;
				muxlut:8:(207,27):(60): muxlut.tdf;
				muxlut:9:(230,21):(77): muxlut.tdf;
			}
			muxlut:7:(167,21):(282): muxlut.tdf
			{
				muxlut:8:(207,27):(43): muxlut.tdf;
				muxlut:8:(207,27):(60): muxlut.tdf;
				muxlut:9:(230,21):(77): muxlut.tdf;
			}
		}
		dtrigger8x::(0,0):(18): dtrigger8x.gdf;
		lpm_decode::(0,0):(6): lpm_decode.tdf
		{
			altshift:2:(75,2):(41,external_latency_ffs): altshift.tdf;
			declut:3:(94,5):(62,decoder): declut.tdf;
		}
		dtrigger8x::(0,0):(7): dtrigger8x.gdf;
		dtrigger8x::(0,0):(8): dtrigger8x.gdf;
		dtrigger8x::(0,0):(9): dtrigger8x.gdf;
		dtrigger8x::(0,0):(10): dtrigger8x.gdf;
		dtrigger8x::(0,0):(11): dtrigger8x.gdf;
		dtrigger8x::(0,0):(12): dtrigger8x.gdf;
		dtrigger8x::(0,0):(13): dtrigger8x.gdf;
		dtrigger8x::(0,0):(14): dtrigger8x.gdf;
	}
}
